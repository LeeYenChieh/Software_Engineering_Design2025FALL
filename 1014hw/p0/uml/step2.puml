@startuml step2
left to right direction
class Client{
    + people: Map<String, Person>
    + createPerson(name, job, weight, height)
    + getJob(name)
    + getWeightAverage(names[])
    + getWeightSum(names[])
    + getHeightAverage(names[])
    + getHeightSum(names[])
}

abstract class Person{
    + name: string
    + job: string
    + weight: float
    + height: float
}

together{
    class ConcretePerson{
    }

    class NullPerson{
        + name: string = 'Unknown'
        + job: string = 'Unknown'
        + weight: float = 0
        + height: float = 0
    }
}

note bottom of Client
void createPerson(name, job, weight, height){
    if one of name, job, weight and height is invalid:
        this.people.add(new NullPerson())
    else
        this.people.add(new Person(name, job, weight, height))
}
end note

Person <|-- ConcretePerson
Person <|-- NullPerson
Client o--> Person

@enduml