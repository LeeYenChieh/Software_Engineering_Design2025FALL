@startuml step3

class Book{
    + author: String
    + subject: String
    + borrower: Borrower
    + available: Boolean = true
}

class User{

}

together{
    class Staff{

    }

    class Borrower{
        + checkoutBook: : Book[]
        + maxNumCheckoutBook: int
    }
}

User <|-- Staff
User <|-- Borrower

interface ILibrarySystem{
    + checkoutBook(Book)
    + returnBook(Book)
    + addBook(Book)
    + removeBook(Book)
    + getBooksByAuthor(String author)
    + getBookBySubject(String subject)
    + getCheckedoutBookByBorrower(Borrower)
    + getBorrowerByBook(Book)
}

together{
    class RealLibrarySystem{
        + books: Book[]
        + checkoutBook(Book)
        + returnBook(Book)
        + addBook(Book)
        + removeBook(Book)
        + getBooksByAuthor(String author)
        + getBookBySubject(String subject)
        + getCheckedoutBookByBorrower(Borrower)
        + getBorrowerByBook(Book)
    }

    class StaffLibrarySystem{
        + user: User
        + checkoutBook(Book)
        + returnBook(Book)
        + addBook(Book)
        + removeBook(Book)
        + getBooksByAuthor(String author)
        + getBookBySubject(String subject)
        + getCheckedoutBookByBorrower(Borrower)
        + getBorrowerByBook(Book)
    }

    class BorrowerLibrarySystem{
        + user: User
        + checkoutBook(Book)
        + returnBook(Book)
        + addBook(Book)
        + removeBook(Book)
        + getBooksByAuthor(String author)
        + getBookBySubject(String subject)
        + getCheckedoutBookByBorrower(Borrower)
        + getBorrowerByBook(Book)
    }
}

LibrarySystem <|.. RealLibrarySystem
LibrarySystem <|.. StaffLibrarySystem
LibrarySystem <|.. BorrowerLibrarySystem
StaffLibrarySystem --> User
BorrowerLibrarySystem --> User

note left of RealLibrarySystem
void checkoutBook(Book b, Borrower borrower){
    b.borrower = borrower
    b.available = false
}

void returnBook(User user, Book b){
    b.borrower = null
    b.available = true
}

void addBook(Book b){
    this.books.add(b)
}

void removeBook(Book b){
    this.books.remove(b)
}

Book[] getBooksByAuthor(String author){
    Book[] target
    for(Book b : this.books){
        if(b.author.equals(author))
            target.add(b)
    }
    return target
}

Book[] getBooksBySubject(String subject){
    Book[] target
    for(Book b : this.books){
        if(b.subject.equals(subject))
            target.add(b)
    }
    return target
}

Book[] getCheckedoutBookByBorrower(Borrower borrower){
    Book[] target
    for(Book b : this.books){
        if(b.borrower == borrower)
            target.add(b)
    }
    return target
}

Borrower getBorrowerByBook(Book b){
    return b.borrower
}
end note

StaffLibrarySystem --> RealLibrarySystem
BorrowerLibrarySystem --> RealLibrarySystem
RealLibrarySystem --> Book
Borrower -- Book

@enduml