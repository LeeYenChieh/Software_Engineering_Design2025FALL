@startuml init4

class Book{
    + author: String
    + subject: String
    + borrower: Borrower
    + available: Boolean = true
}

class User{

}

together{
    class Staff{

    }

    class Borrower{
        + checkoutBook: : Book[]
        + maxNumCheckoutBook: int
    }
}

User <|-- Staff
User <|-- Borrower

class LibrarySystem{
    + books: Book[]
    + checkoutBook(Book)
    + returnBook(Book)
    + addBook(Book)
    + removeBook(Book)
    + getBooksByAuthor(String author)
    + getBookBySubject(String subject)
    + getCheckedoutBookByBorrower(Borrower)
    + getBorrowerByBook(Book)
}

User -- LibrarySystem

note left of LibrarySystem
void checkoutBook(User user, Book b, Borrower borrower){
    if(user is Borrower)
        deny
    b.borrower = borrower
    b.available = false
}

void returnBook(User user, Book b){
    if(user is Borrower)
        deny
    b.borrower = null
    b.available = true
}

void addBook(User user, Book b){
    if(user is Borrower)
        deny
    this.books.add(b)
}

void removeBook(User user, Book b){
    if(user is Borrower)
        deny
    this.books.remove(b)
}

Book[] getBooksByAuthor(String author){
    Book[] target
    for(Book b : this.books){
        if(b.author.equals(author))
            target.add(b)
    }
    return target
}

Book[] getBooksBySubject(String subject){
    Book[] target
    for(Book b : this.books){
        if(b.subject.equals(subject))
            target.add(b)
    }
    return target
}

Book[] getCheckedoutBookByBorrower(User user, Borrower borrower){
    if(user is Borrower && user != borrower)
        deny
    Book[] target
    for(Book b : this.books){
        if(b.borrower == borrower)
            target.add(b)
    }
    return target
}

Borrower getBorrowerByBook(User user, Book b){
    if(user is Borrower)
        deny
    return b.borrower
}
end note

LibrarySystem --> Book
Borrower -- Book

@enduml